use v6.c;
use Test;

use lib 'lib';
use DBIish;
use MyJudo;

my $mj = MyJudo.new(
    dbh => DBIish.connect("SQLite", :database<db/test.db>)
);

subtest {
	_clean_tables;
	$mj.add_new_user(
	    user_name => 'test',
	    password  => 'secret',
	);

	my $sth = $mj.dbh.prepare('SELECT id,username from users');
	$sth.execute;
	my %user = $sth.row(:hash);

	is %user, {
	    id => 1,
	    username => 'test',
	}, 'New user is added';

	done-testing;
}, 'add_new_user';

subtest {
	_clean_tables;

	$mj.add_sensei(
	    family_name => 'last',
	    given_name  => 'first',
	);

	my $sth = $mj.dbh.prepare('SELECT * from sensei');
	$sth.execute;
	my %sensei = $sth.row(:hash);

	is-deeply %sensei, {
	    family_name => 'Last',
            given_name  => 'First',
            id          => 1,
            their_sensei => Any,
	}, 'Sensei record is correct';
	done-testing;
}, 'add_sensei';

todo '';	subtest { done-testing; }, 'get_admin_dashboard_data';

subtest {
	_clean_tables;

	$mj.add_sensei(
	    family_name => 'last',
	    given_name  => 'first',
	);

	my %sensei = $mj.get_sensei_by_name(family_name => 'last', given_name => 'first');
	is-deeply %sensei, {
	    family_name => 'Last',
            given_name  => 'First',
            id          => 1,
            their_sensei => Any,
	}, 'Sensei record is correct';

    done-testing;
}, 'get_sensei_by_name';

subtest {
	_clean_tables;
	$mj.add_new_user(
	    user_name => 'jbloggs',
	    password  => 'secret_pasword',
	);

	my %data = $mj.get_user_data(user_name => 'jbloggs');

        #say %data.perl;
	is-deeply %data, {
		id => 1,
		sensei => [],
           	sessions => 0,
		sessions_this_month => 0,
		sessions_last_month => 0,
 		sessions_this_year  => 0,
  		techniques          => {},
    		techniques_this_month => {},
    		techniques_last_month => {},
                techniques_this_year  => {},
		tree		      => {},
		user_name             => 'jbloggs',
	}, 'User data is correct';

        done-testing;
}, 'get_user_data';

subtest {
    _clean_tables;

	$mj.add_new_user(
	    user_name => 'user1',
	    password  => 'secret_pasword',
	);
	$mj.add_sensei(
	    family_name => 'last',
	    given_name  => 'first',
	);

	nok $mj.is_user_linked_to_sensei(
	    user_id => 1,
            sensei_id => 1,
	), 'Sensei not shown as linked';

        $mj.link_user_to_sensei(
	    user_id => 1,
            sensei_id => 1,
	);

	ok $mj.is_user_linked_to_sensei(
	    user_id => 1,
            sensei_id => 1,
	), 'Sensei is shown as linked after being linked';

    done-testing;
}, 'is_user_linked_to_sensei';

subtest {
    _clean_tables;

	nok $mj.is_username_taken(user_name => 'user1'), 'Username does not exist before being inserted';

	$mj.add_new_user(
	    user_name => 'user1',
	    password  => 'secret_pasword',
	);

	ok $mj.is_username_taken(user_name => 'user1'), 'Username exists after being inserted';
    done-testing;
}, 'is_username_taken';

subtest {
    _clean_tables;

	$mj.add_new_user(
	    user_name => 'jbloggs2',
	    password  => 'secret_pasword',
	);
	my %user = $mj.get_user_data(user_name => 'jbloggs2');

	$mj.add_sensei(
	    family_name => 'Smith',
            given_name  => 'John',
	);
        my %sensei = $mj.get_sensei_by_name(family_name => 'Smith', given_name => 'John' );

        $mj.link_user_to_sensei(
	    user_id => 1,
            sensei_id => 1,
	);
	my %data = $mj.get_user_data(user_name => 'jbloggs2');

	is-deeply %data, {
		id => 1,
		sensei => [
		    ${
			family_name => 'Smith',
			given_name  => 'John',
			id          => 1,
			sensei_id   => 1,
			their_sensei => Any,
			user_id      => 1,
		    }
		],
           	sessions => 0,
		sessions_this_month => 0,
		sessions_last_month => 0,
 		sessions_this_year  => 0,
  		techniques          => {},
    		techniques_this_month => {},
    		techniques_last_month => {},
                techniques_this_year  => {},
		tree		      => {},
		user_name             => 'jbloggs2',
	}, 'User data is correct';

    done-testing;
}, 'link_user_to_sensei';

subtest {
    _clean_tables;
	$mj.add_new_user(
	    user_name => 'test_user',
	    password  => 'secret',
	);

	$mj.dbh.do("INSERT INTO sessions
                  (date, user_id, techniques)
                  VALUES ('2017-01-01',1,'')");

	ok $mj.training_session_exists( user_id => 1, date => '2017-01-01'), 'Return true if session is on this day for this user';
	nok $mj.training_session_exists( user_id => 1, date => '2017-12-12'), 'Return false if session is on this day for this user';

    done-testing;
}, 'training_session_exists';


subtest {
	_clean_tables;

	$mj.add_new_user(
	    user_name => 'tester',
	    password  => 'abc123',
	);
	nok $mj.valid_user_credentials(
		user_name => 'tester',
		password  => 'abcdefg',
	), 'Incorrect password returns false as expected';

	ok $mj.valid_user_credentials(
		user_name => 'tester',
		password  => 'abc123',
	), 'Correct password returns false as expected';
	done-testing;
}, 'valid_user_credentials';


done-testing;

sub _clean_tables {
	$mj.dbh.do('DELETE FROM users;');
        $mj.dbh.do('DELETE FROM sensei;');
        $mj.dbh.do('DELETE FROM sensei_sensei;');
        $mj.dbh.do('DELETE FROM sessions;');
        $mj.dbh.do('DELETE FROM users_sensei;');
}
